/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GlobalModelService } from "../globalModel.service";
import { GlobalModelCreateInput } from "./GlobalModelCreateInput";
import { GlobalModel } from "./GlobalModel";
import { GlobalModelFindManyArgs } from "./GlobalModelFindManyArgs";
import { GlobalModelWhereUniqueInput } from "./GlobalModelWhereUniqueInput";
import { GlobalModelUpdateInput } from "./GlobalModelUpdateInput";

export class GlobalModelControllerBase {
  constructor(protected readonly service: GlobalModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GlobalModel })
  async createGlobalModel(
    @common.Body() data: GlobalModelCreateInput
  ): Promise<GlobalModel> {
    return await this.service.createGlobalModel({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        modelUrl: true,
        globalAccuracy: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GlobalModel] })
  @ApiNestedQuery(GlobalModelFindManyArgs)
  async globalModels(@common.Req() request: Request): Promise<GlobalModel[]> {
    const args = plainToClass(GlobalModelFindManyArgs, request.query);
    return this.service.globalModels({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        modelUrl: true,
        globalAccuracy: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GlobalModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async globalModel(
    @common.Param() params: GlobalModelWhereUniqueInput
  ): Promise<GlobalModel | null> {
    const result = await this.service.globalModel({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        modelUrl: true,
        globalAccuracy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GlobalModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGlobalModel(
    @common.Param() params: GlobalModelWhereUniqueInput,
    @common.Body() data: GlobalModelUpdateInput
  ): Promise<GlobalModel | null> {
    try {
      return await this.service.updateGlobalModel({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          modelUrl: true,
          globalAccuracy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GlobalModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGlobalModel(
    @common.Param() params: GlobalModelWhereUniqueInput
  ): Promise<GlobalModel | null> {
    try {
      return await this.service.deleteGlobalModel({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          modelUrl: true,
          globalAccuracy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
