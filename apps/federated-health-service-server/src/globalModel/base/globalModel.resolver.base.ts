/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GlobalModel } from "./GlobalModel";
import { GlobalModelCountArgs } from "./GlobalModelCountArgs";
import { GlobalModelFindManyArgs } from "./GlobalModelFindManyArgs";
import { GlobalModelFindUniqueArgs } from "./GlobalModelFindUniqueArgs";
import { CreateGlobalModelArgs } from "./CreateGlobalModelArgs";
import { UpdateGlobalModelArgs } from "./UpdateGlobalModelArgs";
import { DeleteGlobalModelArgs } from "./DeleteGlobalModelArgs";
import { GlobalModelService } from "../globalModel.service";
@graphql.Resolver(() => GlobalModel)
export class GlobalModelResolverBase {
  constructor(protected readonly service: GlobalModelService) {}

  async _globalModelsMeta(
    @graphql.Args() args: GlobalModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GlobalModel])
  async globalModels(
    @graphql.Args() args: GlobalModelFindManyArgs
  ): Promise<GlobalModel[]> {
    return this.service.globalModels(args);
  }

  @graphql.Query(() => GlobalModel, { nullable: true })
  async globalModel(
    @graphql.Args() args: GlobalModelFindUniqueArgs
  ): Promise<GlobalModel | null> {
    const result = await this.service.globalModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GlobalModel)
  async createGlobalModel(
    @graphql.Args() args: CreateGlobalModelArgs
  ): Promise<GlobalModel> {
    return await this.service.createGlobalModel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GlobalModel)
  async updateGlobalModel(
    @graphql.Args() args: UpdateGlobalModelArgs
  ): Promise<GlobalModel | null> {
    try {
      return await this.service.updateGlobalModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GlobalModel)
  async deleteGlobalModel(
    @graphql.Args() args: DeleteGlobalModelArgs
  ): Promise<GlobalModel | null> {
    try {
      return await this.service.deleteGlobalModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
