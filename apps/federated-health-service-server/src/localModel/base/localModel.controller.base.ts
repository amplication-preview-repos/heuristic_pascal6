/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LocalModelService } from "../localModel.service";
import { LocalModelCreateInput } from "./LocalModelCreateInput";
import { LocalModel } from "./LocalModel";
import { LocalModelFindManyArgs } from "./LocalModelFindManyArgs";
import { LocalModelWhereUniqueInput } from "./LocalModelWhereUniqueInput";
import { LocalModelUpdateInput } from "./LocalModelUpdateInput";
import { TrainingTaskFindManyArgs } from "../../trainingTask/base/TrainingTaskFindManyArgs";
import { TrainingTask } from "../../trainingTask/base/TrainingTask";
import { TrainingTaskWhereUniqueInput } from "../../trainingTask/base/TrainingTaskWhereUniqueInput";

export class LocalModelControllerBase {
  constructor(protected readonly service: LocalModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LocalModel })
  async createLocalModel(
    @common.Body() data: LocalModelCreateInput
  ): Promise<LocalModel> {
    return await this.service.createLocalModel({
      data: {
        ...data,

        hospital: data.hospital
          ? {
              connect: data.hospital,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        trainingAccuracy: true,
        modelUrl: true,

        hospital: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LocalModel] })
  @ApiNestedQuery(LocalModelFindManyArgs)
  async localModels(@common.Req() request: Request): Promise<LocalModel[]> {
    const args = plainToClass(LocalModelFindManyArgs, request.query);
    return this.service.localModels({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        trainingAccuracy: true,
        modelUrl: true,

        hospital: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LocalModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async localModel(
    @common.Param() params: LocalModelWhereUniqueInput
  ): Promise<LocalModel | null> {
    const result = await this.service.localModel({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        trainingAccuracy: true,
        modelUrl: true,

        hospital: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LocalModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLocalModel(
    @common.Param() params: LocalModelWhereUniqueInput,
    @common.Body() data: LocalModelUpdateInput
  ): Promise<LocalModel | null> {
    try {
      return await this.service.updateLocalModel({
        where: params,
        data: {
          ...data,

          hospital: data.hospital
            ? {
                connect: data.hospital,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          trainingAccuracy: true,
          modelUrl: true,

          hospital: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LocalModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLocalModel(
    @common.Param() params: LocalModelWhereUniqueInput
  ): Promise<LocalModel | null> {
    try {
      return await this.service.deleteLocalModel({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          trainingAccuracy: true,
          modelUrl: true,

          hospital: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/trainingTasks")
  @ApiNestedQuery(TrainingTaskFindManyArgs)
  async findTrainingTasks(
    @common.Req() request: Request,
    @common.Param() params: LocalModelWhereUniqueInput
  ): Promise<TrainingTask[]> {
    const query = plainToClass(TrainingTaskFindManyArgs, request.query);
    const results = await this.service.findTrainingTasks(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        trainingDetails: true,
        startTime: true,
        endTime: true,

        localModel: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/trainingTasks")
  async connectTrainingTasks(
    @common.Param() params: LocalModelWhereUniqueInput,
    @common.Body() body: TrainingTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trainingTasks: {
        connect: body,
      },
    };
    await this.service.updateLocalModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/trainingTasks")
  async updateTrainingTasks(
    @common.Param() params: LocalModelWhereUniqueInput,
    @common.Body() body: TrainingTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trainingTasks: {
        set: body,
      },
    };
    await this.service.updateLocalModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/trainingTasks")
  async disconnectTrainingTasks(
    @common.Param() params: LocalModelWhereUniqueInput,
    @common.Body() body: TrainingTaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trainingTasks: {
        disconnect: body,
      },
    };
    await this.service.updateLocalModel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
