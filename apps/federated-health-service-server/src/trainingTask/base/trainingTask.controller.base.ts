/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrainingTaskService } from "../trainingTask.service";
import { TrainingTaskCreateInput } from "./TrainingTaskCreateInput";
import { TrainingTask } from "./TrainingTask";
import { TrainingTaskFindManyArgs } from "./TrainingTaskFindManyArgs";
import { TrainingTaskWhereUniqueInput } from "./TrainingTaskWhereUniqueInput";
import { TrainingTaskUpdateInput } from "./TrainingTaskUpdateInput";

export class TrainingTaskControllerBase {
  constructor(protected readonly service: TrainingTaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrainingTask })
  async createTrainingTask(
    @common.Body() data: TrainingTaskCreateInput
  ): Promise<TrainingTask> {
    return await this.service.createTrainingTask({
      data: {
        ...data,

        localModel: data.localModel
          ? {
              connect: data.localModel,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        trainingDetails: true,
        startTime: true,
        endTime: true,

        localModel: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrainingTask] })
  @ApiNestedQuery(TrainingTaskFindManyArgs)
  async trainingTasks(@common.Req() request: Request): Promise<TrainingTask[]> {
    const args = plainToClass(TrainingTaskFindManyArgs, request.query);
    return this.service.trainingTasks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        trainingDetails: true,
        startTime: true,
        endTime: true,

        localModel: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrainingTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trainingTask(
    @common.Param() params: TrainingTaskWhereUniqueInput
  ): Promise<TrainingTask | null> {
    const result = await this.service.trainingTask({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        trainingDetails: true,
        startTime: true,
        endTime: true,

        localModel: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrainingTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrainingTask(
    @common.Param() params: TrainingTaskWhereUniqueInput,
    @common.Body() data: TrainingTaskUpdateInput
  ): Promise<TrainingTask | null> {
    try {
      return await this.service.updateTrainingTask({
        where: params,
        data: {
          ...data,

          localModel: data.localModel
            ? {
                connect: data.localModel,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          trainingDetails: true,
          startTime: true,
          endTime: true,

          localModel: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrainingTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrainingTask(
    @common.Param() params: TrainingTaskWhereUniqueInput
  ): Promise<TrainingTask | null> {
    try {
      return await this.service.deleteTrainingTask({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          trainingDetails: true,
          startTime: true,
          endTime: true,

          localModel: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
