/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TrainingTask } from "./TrainingTask";
import { TrainingTaskCountArgs } from "./TrainingTaskCountArgs";
import { TrainingTaskFindManyArgs } from "./TrainingTaskFindManyArgs";
import { TrainingTaskFindUniqueArgs } from "./TrainingTaskFindUniqueArgs";
import { CreateTrainingTaskArgs } from "./CreateTrainingTaskArgs";
import { UpdateTrainingTaskArgs } from "./UpdateTrainingTaskArgs";
import { DeleteTrainingTaskArgs } from "./DeleteTrainingTaskArgs";
import { LocalModel } from "../../localModel/base/LocalModel";
import { TrainingTaskService } from "../trainingTask.service";
@graphql.Resolver(() => TrainingTask)
export class TrainingTaskResolverBase {
  constructor(protected readonly service: TrainingTaskService) {}

  async _trainingTasksMeta(
    @graphql.Args() args: TrainingTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TrainingTask])
  async trainingTasks(
    @graphql.Args() args: TrainingTaskFindManyArgs
  ): Promise<TrainingTask[]> {
    return this.service.trainingTasks(args);
  }

  @graphql.Query(() => TrainingTask, { nullable: true })
  async trainingTask(
    @graphql.Args() args: TrainingTaskFindUniqueArgs
  ): Promise<TrainingTask | null> {
    const result = await this.service.trainingTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TrainingTask)
  async createTrainingTask(
    @graphql.Args() args: CreateTrainingTaskArgs
  ): Promise<TrainingTask> {
    return await this.service.createTrainingTask({
      ...args,
      data: {
        ...args.data,

        localModel: args.data.localModel
          ? {
              connect: args.data.localModel,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TrainingTask)
  async updateTrainingTask(
    @graphql.Args() args: UpdateTrainingTaskArgs
  ): Promise<TrainingTask | null> {
    try {
      return await this.service.updateTrainingTask({
        ...args,
        data: {
          ...args.data,

          localModel: args.data.localModel
            ? {
                connect: args.data.localModel,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrainingTask)
  async deleteTrainingTask(
    @graphql.Args() args: DeleteTrainingTaskArgs
  ): Promise<TrainingTask | null> {
    try {
      return await this.service.deleteTrainingTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => LocalModel, {
    nullable: true,
    name: "localModel",
  })
  async getLocalModel(
    @graphql.Parent() parent: TrainingTask
  ): Promise<LocalModel | null> {
    const result = await this.service.getLocalModel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
