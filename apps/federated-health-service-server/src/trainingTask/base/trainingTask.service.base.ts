/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TrainingTask as PrismaTrainingTask,
  LocalModel as PrismaLocalModel,
} from "@prisma/client";

export class TrainingTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrainingTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trainingTask.count(args);
  }

  async trainingTasks(
    args: Prisma.TrainingTaskFindManyArgs
  ): Promise<PrismaTrainingTask[]> {
    return this.prisma.trainingTask.findMany(args);
  }
  async trainingTask(
    args: Prisma.TrainingTaskFindUniqueArgs
  ): Promise<PrismaTrainingTask | null> {
    return this.prisma.trainingTask.findUnique(args);
  }
  async createTrainingTask(
    args: Prisma.TrainingTaskCreateArgs
  ): Promise<PrismaTrainingTask> {
    return this.prisma.trainingTask.create(args);
  }
  async updateTrainingTask(
    args: Prisma.TrainingTaskUpdateArgs
  ): Promise<PrismaTrainingTask> {
    return this.prisma.trainingTask.update(args);
  }
  async deleteTrainingTask(
    args: Prisma.TrainingTaskDeleteArgs
  ): Promise<PrismaTrainingTask> {
    return this.prisma.trainingTask.delete(args);
  }

  async getLocalModel(parentId: string): Promise<PrismaLocalModel | null> {
    return this.prisma.trainingTask
      .findUnique({
        where: { id: parentId },
      })
      .localModel();
  }
}
